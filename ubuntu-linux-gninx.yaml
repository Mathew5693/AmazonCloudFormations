---
AWSTemplateFormatVersion: '2010-09-09'
Description: Creates an Amazon Linux Webserver

Parameters:
  KeyName:
    Description: Name of existing EC2 KeyPair to enable SSH Access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
 SSHLocation:
   Description: ' The IP Address range that can be used to SSH to the EC2 Instance'
   Type: String
   MinLength: '9'
   MaxLength: '18'
   Default: 131.247.0.0/16
   AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
   ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
   
   
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-66506c1c
    us-east-2:
      AMI: ami-965e6bf3
    us-west-1:
      AMI: ami-07585467
    us-west-2:
      AMI: ami-79873901
    Asia-Pacific-1:
      AMI: ami-84e3b2eb
    Asia-Pacific-2:
      AMI: ami-ab77d4c5
    Asia-Pacific-3:
      AMI: ami-b7f388cb
    Asia-Pacific-4:
      AMI: ami-33ab5251
    Asia-Pacific-5:
      AMI: ami-48630c2e
    Canada-1:
      AMI: ami-173db873
    EU-1:
      AMI: ami-5055cd3f
    EU-2:
      AMI: ami-1b791862
    EU-1:
      AMI: ami-941e04f0
    EU-2:
      AMI: ami-c1cf79bc
    South-America-1:
      AMI: ami-bb9bd7d7

Resources:
  EC2Instance:
   Type: AWS::EC2::Instnace
   MetaData:
     AWS::CloudFormation::Init:
       config:
         packages:
           yum:
             httpd: []
             nginx: []
         files:
           "/var/www/html/index.html":
             content:
               <html>
                 <body>
                   <h1>Mathew Apanovich CloudFormed Server</h1>
                   <h2>with CloudFormation Helper Scripts</h2>
                    <p>Hello World!</p>
                   </body>
                 </html>
        
             mode: '000644'
             owner: root
             group: root
           
           /tmp/nginx/default.conf:
             
             mode: '000755'
             owner: root
             group: root
          
           /etc/cfn/cfn-hup.conf:
             content: !Sub |
               [main] 
               stack=@{AWS::StackID}
               region${AWS::Region}
               interval=1
             mode: '000400'
             owner: root
             group: root
          
           /etc/cfn/hooks.d/cfn-auto-reloader.conf:
             content: 
               [cfn-auto-reloader-hook]
               triggers=post.update
               path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
               action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
               runas=root
             mode: '000400'
             owner: root
             group: root
            
            
         services:
           sysvinit:
             httpd:
               enabled: 'true'
               ensureRunning: 'true'
             nginx:
               enabled: 'true'
               ensureRunning: 'true'
               files:
                 - /etc/nginx/conf.d/default.conf
             cfn-hup:
               enable: 'true'
               ensureRunning: 'true'
               files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

           
           
   Properties:
     ImageID: !FindInMap [Region2AMI, !Ref 'AWS::Region', 'AMI' ]
     Instance: t2.micro
     SecurityGroups:
     - !Ref WebserverSecurityGroup
     Tags:
     -Key: Name
      Value: CloudFormation
     Keyname: !Ref KeyName
     UserData:
       'FN::Base64': !Sub | 
         #!/bin/bash -ex
          yum update -y aws-cfn-bootstrap
         /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
         # Signal the status from cfn-init (via $?)
         /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}

  WebserverSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
      FromPort: 80
      IpProtocol: tcp
      ToPort: 80
      - CidrIp: !Ref SSHLocation
      FromPort: 22
      IpProtocol: TCP
      ToPort: 22
Outputs:
  HellowWorldURL: 
    Description: URL Pointing at our page
    Value: !Sub 'http://${EC2Instance.PublixIp}'
  Region:
    Description: Current Region
    Value: !Ref 'AWS::Region'
    